import jsPDF from 'jspdf';
import { businessConfig } from '../config';
import { DailySalesReport, MonthlySalesReport } from '../types';

export class PDFExportService {
  private formatCurrency(amount: number): string {
    return `${businessConfig.currency.symbol}${amount.toFixed(businessConfig.currency.decimals)}`;
  }

  private formatDate(date: string): string {
    return new Date(date).toLocaleDateString('en-IN');
  }

  // Generate PDF for daily sales report
  async generateDailyReportPDF(report: DailySalesReport): Promise<Blob> {
    const pdf = new jsPDF();
    let yPosition = 20;

    // Header
    pdf.setFontSize(20);
    pdf.text('Daily Sales Report', 20, yPosition);
    yPosition += 10;

    pdf.setFontSize(12);
    pdf.text(`Date: ${this.formatDate(report.date)}`, 20, yPosition);
    yPosition += 15;

    // Summary table
    pdf.setFontSize(14);
    pdf.text('Summary', 20, yPosition);
    yPosition += 10;

    const summaryData = [
      ['Total Sales', this.formatCurrency(report.total_sales)],
      ['Total Orders', report.total_orders.toString()],
      ['Average Order Value', this.formatCurrency(report.average_order_value)],
      ['Cash Sales', this.formatCurrency(report.cash_sales)],
      ['Card Sales', this.formatCurrency(report.card_sales)],
      ['UPI Sales', this.formatCurrency(report.upi_sales)],
      ['Online Sales', this.formatCurrency(report.online_sales)]
    ];

    pdf.setFontSize(10);
    summaryData.forEach(([label, value]) => {
      pdf.text(label, 20, yPosition);
      pdf.text(value, 120, yPosition);
      yPosition += 7;
    });

    yPosition += 10;

    // Payment method breakdown
    pdf.setFontSize(14);
    pdf.text('Payment Method Breakdown', 20, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.text(
      `Cash: ${report.payment_method_breakdown.cash.count} orders, ${this.formatCurrency(report.payment_method_breakdown.cash.amount)}`,
      20, yPosition
    );
    yPosition += 7;

    pdf.text(
      `Card: ${report.payment_method_breakdown.card.count} orders, ${this.formatCurrency(report.payment_method_breakdown.card.amount)}`,
      20, yPosition
    );
    yPosition += 7;

    pdf.text(
      `UPI: ${report.payment_method_breakdown.upi.count} orders, ${this.formatCurrency(report.payment_method_breakdown.upi.amount)}`,
      20, yPosition
    );
    yPosition += 7;

    pdf.text(
      `Online: ${report.payment_method_breakdown.online.count} orders, ${this.formatCurrency(report.payment_method_breakdown.online.amount)}`,
      20, yPosition
    );
    yPosition += 15;

    // Top selling items
    if (report.top_selling_items.length > 0) {
      pdf.setFontSize(14);
      pdf.text('Top Selling Items', 20, yPosition);
      yPosition += 10;

      pdf.setFontSize(10);
      report.top_selling_items.slice(0, 10).forEach((item, index) => {
        pdf.text(
          `${index + 1}. ${item.product_name} - ${item.quantity_sold} units - ${this.formatCurrency(item.revenue)}`,
          20, yPosition
        );
        yPosition += 7;
      });

      yPosition += 10;
    }

    // Hourly sales chart
    if (report.hourly_sales.length > 0 && yPosition < 200) {
      pdf.setFontSize(14);
      pdf.text('Hourly Sales', 20, yPosition);
      yPosition += 10;

      pdf.setFontSize(10);
      report.hourly_sales.forEach(hour => {
        pdf.text(
          `${hour.hour}: ${this.formatCurrency(hour.sales)} (${hour.orders} orders)`,
          20, yPosition
        );
        yPosition += 7;
      });
    }

    // Footer
    yPosition = 280;
    pdf.setFontSize(8);
    pdf.text(
      `Generated by ${businessConfig.app?.name || 'Smoocho Bill'} POS System`,
      20, yPosition
    );

    return pdf.output('blob');
  }

  // Generate PDF for monthly sales report
  async generateMonthlyReportPDF(report: MonthlySalesReport): Promise<Blob> {
    const pdf = new jsPDF();
    let yPosition = 20;

    // Header
    pdf.setFontSize(20);
    pdf.text('Monthly Sales Report', 20, yPosition);
    yPosition += 10;

    pdf.setFontSize(12);
    pdf.text(`Month: ${report.month}/${report.year}`, 20, yPosition);
    yPosition += 15;

    // Summary table
    pdf.setFontSize(14);
    pdf.text('Summary', 20, yPosition);
    yPosition += 10;

    const summaryData = [
      ['Total Sales', this.formatCurrency(report.total_sales)],
      ['Total Orders', report.total_orders.toString()],
      ['Total Profit', this.formatCurrency(report.total_profit)],
      ['Profit Margin', `${((report.total_profit / report.total_sales) * 100).toFixed(1)}%`]
    ];

    pdf.setFontSize(10);
    summaryData.forEach(([label, value]) => {
      pdf.text(label, 20, yPosition);
      pdf.text(value, 120, yPosition);
      yPosition += 7;
    });

    yPosition += 10;

    // Payment trends
    pdf.setFontSize(14);
    pdf.text('Payment Trends', 20, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.text(`Cash: ${report.payment_trends.cash_percentage.toFixed(1)}%`, 20, yPosition);
    yPosition += 7;
    pdf.text(`Card: ${report.payment_trends.card_percentage.toFixed(1)}%`, 20, yPosition);
    yPosition += 7;
    pdf.text(`UPI: ${report.payment_trends.upi_percentage.toFixed(1)}%`, 20, yPosition);
    yPosition += 7;
    pdf.text(`Online: ${report.payment_trends.online_percentage.toFixed(1)}%`, 20, yPosition);
    yPosition += 15;

    // Top selling items
    if (report.top_selling_items.length > 0) {
      pdf.setFontSize(14);
      pdf.text('Top Selling Items', 20, yPosition);
      yPosition += 10;

      pdf.setFontSize(10);
      report.top_selling_items.slice(0, 10).forEach((item, index) => {
        pdf.text(
          `${index + 1}. ${item.product_name} - ${item.quantity_sold} units - ${this.formatCurrency(item.revenue)}`,
          20, yPosition
        );
        yPosition += 7;
      });

      yPosition += 10;
    }

    // Stock usage
    if (report.stock_usage.length > 0 && yPosition < 200) {
      pdf.setFontSize(14);
      pdf.text('Stock Usage', 20, yPosition);
      yPosition += 10;

      pdf.setFontSize(10);
      report.stock_usage.slice(0, 15).forEach(item => {
        pdf.text(
          `${item.item_name} - ${item.total_used} units - ${this.formatCurrency(item.cost)}`,
          20, yPosition
        );
        yPosition += 7;
      });
    }

    // Footer
    yPosition = 280;
    pdf.setFontSize(8);
    pdf.text(
      `Generated by ${businessConfig.app?.name || 'Smoocho Bill'} POS System`,
      20, yPosition
    );

    return pdf.output('blob');
  }

  // Export daily report as PDF
  async exportDailyReport(report: DailySalesReport): Promise<void> {
    const blob = await this.generateDailyReportPDF(report);
    const filename = `daily-sales-report-${report.date}.pdf`;
    this.downloadFile(blob, filename);
  }

  // Export monthly report as PDF
  async exportMonthlyReport(report: MonthlySalesReport): Promise<void> {
    const blob = await this.generateMonthlyReportPDF(report);
    const filename = `monthly-sales-report-${report.month}-${report.year}.pdf`;
    this.downloadFile(blob, filename);
  }

  private downloadFile(blob: Blob, filename: string): void {
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }
}

export class PrintService {
  // Print daily report
  async printDailyReport(report: DailySalesReport): Promise<void> {
    const printWindow = window.open('', '_blank');
    if (!printWindow) return;

    const html = this.generateDailyReportHTML(report);
    printWindow.document.write(html);
    printWindow.document.close();
    printWindow.print();
  }

  // Print monthly report
  async printMonthlyReport(report: MonthlySalesReport): Promise<void> {
    const printWindow = window.open('', '_blank');
    if (!printWindow) return;

    const html = this.generateMonthlyReportHTML(report);
    printWindow.document.write(html);
    printWindow.document.close();
    printWindow.print();
  }

  // Generate HTML for daily report
  private generateDailyReportHTML(report: DailySalesReport): string {
    const formatCurrency = (amount: number) =>
      `${businessConfig.currency.symbol}${amount.toFixed(businessConfig.currency.decimals)}`;

    return `
      <!DOCTYPE html>
      <html>
        <head>
          <title>Daily Sales Report - ${report.date}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .header { text-align: center; margin-bottom: 30px; }
            .summary { margin-bottom: 30px; }
            .item { margin: 10px 0; padding: 5px; border-bottom: 1px solid #eee; }
            .section { margin: 20px 0; }
            .section h3 { color: #333; border-bottom: 2px solid #007bff; }
            table { width: 100%; border-collapse: collapse; margin: 10px 0; }
            th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
            th { background-color: #f8f9fa; }
            @media print { body { margin: 0; } }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>Daily Sales Report</h1>
            <p>Date: ${new Date(report.date).toLocaleDateString('en-IN')}</p>
          </div>

          <div class="summary">
            <h3>Summary</h3>
            <div class="item">Total Sales: ${formatCurrency(report.total_sales)}</div>
            <div class="item">Total Orders: ${report.total_orders}</div>
            <div class="item">Average Order Value: ${formatCurrency(report.average_order_value)}</div>
          </div>

          <div class="section">
            <h3>Payment Method Breakdown</h3>
            <div class="item">Cash: ${report.payment_method_breakdown.cash.count} orders - ${formatCurrency(report.payment_method_breakdown.cash.amount)}</div>
            <div class="item">Card: ${report.payment_method_breakdown.card.count} orders - ${formatCurrency(report.payment_method_breakdown.card.amount)}</div>
            <div class="item">UPI: ${report.payment_method_breakdown.upi.count} orders - ${formatCurrency(report.payment_method_breakdown.upi.amount)}</div>
            <div class="item">Online: ${report.payment_method_breakdown.online.count} orders - ${formatCurrency(report.payment_method_breakdown.online.amount)}</div>
          </div>

          <div class="section">
            <h3>Top Selling Items</h3>
            <table>
              <thead>
                <tr><th>Item</th><th>Quantity</th><th>Revenue</th></tr>
              </thead>
              <tbody>
                ${report.top_selling_items
                  .slice(0, 10)
                  .map(
                    (item, index) =>
                      `<tr><td>${index + 1}. ${item.product_name}</td><td>${item.quantity_sold}</td><td>${formatCurrency(item.revenue)}</td></tr>`
                  )
                  .join('')}
              </tbody>
            </table>
          </div>

          <div class="section">
            <h3>Hourly Sales</h3>
            <table>
              <thead>
                <tr><th>Hour</th><th>Sales</th><th>Orders</th></tr>
              </thead>
              <tbody>
                ${report.hourly_sales
                  .map(hour => `<tr><td>${hour.hour}</td><td>${formatCurrency(hour.sales)}</td><td>${hour.orders}</td></tr>`)
                  .join('')}
              </tbody>
            </table>
          </div>

          <div style="margin-top: 50px; text-align: center; color: #666; font-size: 12px;">
            Generated by ${businessConfig.app?.name || 'Smoocho Bill'} POS System
          </div>
        </body>
      </html>
    `;
  }

  // Generate HTML for monthly report
  private generateMonthlyReportHTML(report: MonthlySalesReport): string {
    const formatCurrency = (amount: number) =>
      `${businessConfig.currency.symbol}${amount.toFixed(businessConfig.currency.decimals)}`;

    return `
      <!DOCTYPE html>
      <html>
        <head>
          <title>Monthly Sales Report - ${report.month}/${report.year}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .header { text-align: center; margin-bottom: 30px; }
            .summary { margin-bottom: 30px; }
            .item { margin: 10px 0; padding: 5px; border-bottom: 1px solid #eee; }
            .section { margin: 20px 0; }
            .section h3 { color: #333; border-bottom: 2px solid #007bff; }
            table { width: 100%; border-collapse: collapse; margin: 10px 0; }
            th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
            th { background-color: #f8f9fa; }
            @media print { body { margin: 0; } }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>Monthly Sales Report</h1>
            <p>Month: ${report.month}/${report.year}</p>
          </div>

          <div class="summary">
            <h3>Summary</h3>
            <div class="item">Total Sales: ${formatCurrency(report.total_sales)}</div>
            <div class="item">Total Orders: ${report.total_orders}</div>
            <div class="item">Total Profit: ${formatCurrency(report.total_profit)}</div>
            <div class="item">Profit Margin: ${((report.total_profit / report.total_sales) * 100).toFixed(1)}%</div>
          </div>

          <div class="section">
            <h3>Payment Trends</h3>
            <div class="item">Cash: ${report.payment_trends.cash_percentage.toFixed(1)}%</div>
            <div class="item">Card: ${report.payment_trends.card_percentage.toFixed(1)}%</div>
            <div class="item">UPI: ${report.payment_trends.upi_percentage.toFixed(1)}%</div>
            <div class="item">Online: ${report.payment_trends.online_percentage.toFixed(1)}%</div>
          </div>

          <div class="section">
            <h3>Top Selling Items</h3>
            <table>
              <thead>
                <tr><th>Item</th><th>Quantity</th><th>Revenue</th></tr>
              </thead>
              <tbody>
                ${report.top_selling_items
                  .slice(0, 10)
                  .map(
                    (item, index) =>
                      `<tr><td>${index + 1}. ${item.product_name}</td><td>${item.quantity_sold}</td><td>${formatCurrency(item.revenue)}</td></tr>`
                  )
                  .join('')}
              </tbody>
            </table>
          </div>

          <div class="section">
            <h3>Stock Usage</h3>
            <table>
              <thead>
                <tr><th>Item</th><th>Quantity</th><th>Cost</th></tr>
              </thead>
              <tbody>
                ${report.stock_usage
                  .slice(0, 15)
                  .map(item => `<tr><td>${item.item_name}</td><td>${item.total_used}</td><td>${formatCurrency(item.cost)}</td></tr>`)
                  .join('')}
              </tbody>
            </table>
          </div>

          <div style="margin-top: 50px; text-align: center; color: #666; font-size: 12px;">
            Generated by ${businessConfig.app?.name || 'Smoocho Bill'} POS System
          </div>
        </body>
      </html>
    `;
  }
}

// Export instances
export const pdfExportService = new PDFExportService();
export const printService = new PrintService();
